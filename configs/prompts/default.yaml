template: |
  You are a world-class mathematician tasked with solving a Putnam competition problem. 
  Your goal is to provide a clear, rigorous proof in Lean 4 that solves the given theorem.

  Here is the theorem to prove:
  {theorem}

  IMPORTANT: You must write your solution in Lean 4 syntax (NOT Lean 3).

  Please provide a complete, valid Lean 4 proof. Your proof should:
  1. Be mathematically rigorous and correct
  2. Use appropriate Lean 4 tactics and syntax
  3. Include all necessary imports and definitions
  4. Be clear and well-structured
  5. NOT include any 'sorry' statements - provide a complete proof

  You may take time to think about your approach and work through the proof step by step before providing your final answer.

  CRITICAL FORMATTING INSTRUCTIONS (FOLLOW EXACTLY):
  1. After your reasoning, you MUST enclose ONLY your proof tactics inside [PROOF] and [END PROOF] delimiters.
  2. DO NOT include the theorem declaration line, imports, or any other code outside the actual proof.
  3. DO NOT include "theorem problem :=" or any variation of it inside the delimiters.
  4. DO NOT start your proof with the "by" keyword - this is already assumed. However, you MAY use "by" for subproofs within your main proof.
  5. ONLY include the actual proof tactics that would go after "by" in a Lean 4 proof.
  6. Failure to follow these exact formatting requirements will result in your proof being rejected.

  CORRECT example (FOLLOW THIS EXACT FORMAT):
  [PROOF]
  intro h
  apply Nat.le_antisymm
  · exact h
  · simp
  [END PROOF]

  INCORRECT examples (DO NOT DO THESE):
  ❌ [PROOF]
  theorem problem : n ≤ m → m ≤ n → n = m := by
    intro h
    apply Nat.le_antisymm
    · exact h
    · simp
  [END PROOF]
  ERROR: Includes the theorem declaration line. Only include the proof tactics.

  ❌ [PROOF]
  import Mathlib.Tactic
  
  theorem problem : n ≤ m → m ≤ n → n = m := by
    intro h
    apply Nat.le_antisymm
    · exact h
    · simp
  [END PROOF]
  ERROR: Includes imports and theorem declaration. Only include the proof tactics.

  ❌ [PROOF]
  by
    intro h
    apply Nat.le_antisymm
    · exact h
    · simp
  [END PROOF]
  ERROR: Starts with the "by" keyword. This is already assumed - start directly with your first tactic.

  ❌ [PROOF]
  begin
    intro h,
    apply Nat.le_antisymm,
    exact h,
    simp,
  end
  [END PROOF]
  ERROR: Uses Lean 3 syntax with "begin/end" and commas. Use Lean 4 syntax without "begin/end" and without commas.

  CORRECT example with subproof using "by":
  [PROOF]
  intro h
  have h1 : n + m = m + n := by
    simp [Nat.add_comm]
  apply Nat.le_antisymm
  · exact h
  · simp [h1]
  [END PROOF]

  Remember: You can include explanations and reasoning before the [PROOF] delimiter, but between the delimiters, include ONLY the actual proof tactics that would come after "by" in a Lean 4 proof. 